Competitive Programmming Basics
-----------------------------------

Input and Output using 'scanf' and 'printf' - 
-----------------------------------------------
NOTE: input/Output can still be done using cout/cin but in case a million inputs.outputs,
scanf/printf are much faster.

    Int ("%d"): 32 Bit integer
    Long ("%ld"): 64 bit integer
    Char ("%c"): Character type
    Float ("%f"): 32 bit real value
    Double ("%lf"): 64 bit real value

Reading data:
    Format:     scanf("`format_specifier`", &val)
    Example:    char ch;
                double d;
                scanf("%c %lf", &ch, &d);   // read a character followed by a double

Printing data:
    Format:     printf("`format_specifier`", val)
    Example:    char ch = 'd';
                double d = 234.432;
                printf("%c %lf", ch, d);    // print a character followed by a double

Setting precision values for float and double - 
------------------------------------------------

    #include<bits/stdc++.h>
    using namespace std;
    int main()
    {
        int a; long b; char c; float d; double e;
        cin>>a>>b>>c>>d>>e;
        cout<<a<<"\n"<<b<<"\n"<<c<<"\n";
        cout<<fixed<<setprecision(3)<<d<<"\n"; // 'fixed' is used to display the decimal('.')
        cout<<fixed<<setprecision(9)<<e<<"\n"; // 'precision' is used to set the number of digits after the decimal point
        return 0;
    }

Important Points -
-------------------
maximum number that we can store in an unsigned 32 bit integer is 2 ^ 32 – 1 and 
in an unsigned 64 bit integer is 2 ^ 64 – 1 

Rounding of a number - round(<var>)
(round() belongs to the cmath header file)

Modulus (a%b) does not work on 'double' data type

Sometimes codechef gives 'wrong' if there is no endline at the end of output.

Sometimes codechef fails to initialize like 'int a,b,c, = 0;' ... do it as 'int a = 0; int b = 0; int c = 0;'

sometimes codechef gives wrong result if float <---> double

VS Code Multi Cursor Functionality - use alt+click

a important mathematical result - 
    product of 2 numbers = product of their lcm and gcd

string to_string(string input)
        {
            string tmp = input + std::to_string(a) + "," + fname + "," + lname + "," + std::to_string(std);
            return tmp;
        }

to convert integer to string, do: string s = to_string(<int>)
in above function, there is a local function named same, so we specified by std:: ....

built in function for gcd in c++ - 
     int result = __gcd(6, 20);

STL Sort arrays:
    int a[50];
    // lets say the arrays has values...
    sort(arr, arr+ <no_of_elements> );      // ascending order
    sort(arr, arr+n, greater<int>());       // descending order

difference of 2 values: z = abs(x-y);

taking string input using getline fter int iputs - 
    int a; string s;
    cin>>a;
    cin>>ws;        // white space
    getline(cin, s);

convert string to int - 
    int i = stoi("231");

calculation in c++ always happens in the higher data type.
order of precdence - double > float > long long int > int > char
so, cout<<(7/2);                                output: 3
cout<<7.0/2; or cout<<7/2.0;                    output: 3.5
cout<<'c'+1;                                    output: 100
double a = 3/2; cout<<a;                        output: 1

rough ranges of data types - 
    int: -10^9 to 10^9
    long int: -10^12 to 10^12
    long long int: -10^18 to 10^18

overflow - exceeding range of data types
example:    int a = 100000;
            int b = 100000;
            int c = a*b;
            cout<<c;        // error, overflow
            long int d = a*b;
            cout<<d;        // wrong result, as int*int is int, which can't store it, so holds a garbage value, which gets assigned to the 'long int'
            long int e = a*b*1LL;   // by this, we took the whole calculation into long int
            cout<<e;                // correct result
            long long int f = 1e15; // this is valid took
            double g = 1e24;        // range of double is very high, but not accurate for large numbers. similar also applies to float data type
            

INT_MAX is the max value that int can store. Similarly INT_MIN is the min value that int can store.
cout<<INT_MIN<<INT_MAX;
cout<<(INT_MAX+1);          // overflow, so it will cycle back into its range (going to negative range)

Adding a char in a string is not a good idea because of 2 reasons - 
    due to time complexity
    two dissimilar data types are being added
example - to reverse a string, don't do it as:
    string src = "sample";
    string dest;
    for(int i=(src.size()-1);i>=0;i++)
        dest = dest + src[i];
    cout<<dest;
instead, do it as - 
string src = "sample";
    string dest;
    for(int i=(src.size()-1);i>=0;i++)
        dest.push_back(src[i]);
    cout<<dest;

to handle extremely big numbers (of order > 10^18), use strings
example: 
    string large = "12342328739023479832749832503254324908325498732549873254698723546325";
    int last_digit = large[large.size()-1] - '0';

multidimensional arrays are also possible - 
    int arr[2][3];
    int brr[3][7][12];

maximum allowed local array size: 10^5 order
example -   int main()
            {
                int n = 1e7;
                int a[n];                   // will give segmentation fault
                a[n-1] = 77;            
                cout<<a[n-1];
            }
maximum allowed global arrays size: 10^7 order
example -   const int size = 1e10;          // NOTE - if array size is being declared globally, it has to be a const variable
            int arr[size];
            int main()
            {
                arr[size-1] = 2;
                cout<<arr[size-1];          // will work
            }    

max(a, b), min(a, b), swap(a, b) already exists in c++

in declaring/passing multi-dimensional arrays, only first dimension can be omitted...
    example: void display(int m[][30])
    {
        /////
    }

in cp, try to declare arrays as global, instead of passing them in functions...

macros / templates for reusing useful code multiple times and to save time - 
-----------------------------------------------------------------------------

    #define deb(x) cout<<#x<<" "<<x<<endl;
    // the above line of code is very useful in debugging the program... use as: deb(c);
    // and this will print the output as: "c <value of c>"

    template<typename... T>
    void read(T&... args)
    {
        ((cin>>args), ...);
    }
    // the code above can take any number of inputs... example - 
    int a,b,c; 
    char d;
    read(a, b, c, d);

    template<typename... T>
    void write(T... args)
    {
        ((cout<<args<<" "), ...);
    }
    // similar to the above read(), this function can print any number of any type of parameters
    write(a, b, c, d, "this is very time saving!");

toupper(), tolower() work as they should do, but sometimes, typecasting to (char) may be required.

for(int i=0;i<10;cout<<++i<<endl);      // this is a valid cpp code, and prints 1 to 10

In any editor, to do live input(take input from a file and output to a file), include these lines just after 'int main() {' - 
        
            #ifndef ONLINE_JUDGE
            freopen("input.txt", "r", stdin);
            freopen("output.txt", "w", stdout);
            #endif 

and write your code as usual below these lines.






